type Amount = nat;
type Principal = principal;

type FusionError = variant {
    OrderNotFound;
    OrderAlreadyExists;
    InvalidOrderState;
    OrderExpired;
    UnauthorizedCaller;
    InvalidAmount;
    InvalidTimeRange;
    InvalidSecret;
    ReentrancyDetected;
    InsufficientSafetyDeposit;
    TimelockViolation;
    TransferFailed : text;
};

type HashLock = record {
    secret_hash : vec nat8;
    revealed : bool;
    reveal_time : opt nat64;
};

type TimeLock = record {
    finality_lock_duration : nat64;
    exclusive_withdraw_duration : nat64;
    cancellation_timeout : nat64;
    created_at : nat64;
};

type FeeConfig = record {
    protocol_fee_bps : nat16;
    integrator_fee_bps : nat16;
    surplus_bps : nat8;
    max_cancel_premium : Amount;
};

type AuctionData = record {
    start_time : nat64;
    end_time : nat64;
    start_price : Amount;
    end_price : Amount;
    current_price : Amount;
};

type OrderStatus = variant {
    Announced;
    Active;
    Completed;
    Cancelled;
    Failed : text;
};

type OrderConfig = record {
    id : nat64;
    src_mint : Principal;
    dst_mint : Principal;
    maker : Principal;
    src_amount : Amount;
    min_dst_amount : Amount;
    estimated_dst_amount : Amount;
    expiration_time : nat64;
    fee : FeeConfig;
    auction : AuctionData;
    cancellation_auction_secs : nat32;
    hashlock : HashLock;
    timelock : TimeLock;
    status : OrderStatus;
    created_at : nat64;
};

type Result = variant {
    Ok;
    Err : FusionError;
};

service : {
    "create_order": (OrderConfig) -> (Result);
    "fill_order": (nat64, Amount, opt vec nat8) -> (Result);
    "cancel_order": (nat64) -> (Result);
    "get_order": (nat64) -> (opt OrderConfig) query;
    "get_all_orders": () -> (vec OrderConfig) query;
    "get_orders_by_maker": (Principal) -> (vec OrderConfig) query;
    "greet": (text) -> (text) query;
}
