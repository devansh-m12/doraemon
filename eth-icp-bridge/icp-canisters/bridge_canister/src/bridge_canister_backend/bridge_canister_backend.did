type Account = record {
    owner : principal;
    subaccount : opt blob;
};

type TransferArgs = record {
    to : Account;
    fee : opt nat64;
    memo : opt blob;
    from_subaccount : opt blob;
    created_at_time : opt nat64;
    amount : nat64;
};

type TransferResult = record {
    block_height : nat64;
    transfer : Transfer;
};

type Transfer = record {
    to : Account;
    fee : nat64;
    memo : blob;
    from_subaccount : opt blob;
    created_at_time : opt nat64;
    amount : nat64;
};

type SwapOrder = record {
    ethereum_sender : text;
    icp_recipient : principal;
    amount : nat64;
    hashlock : blob;
    timelock : nat64;
    completed : bool;
    refunded : bool;
    created_at : nat64;
    cross_chain_id : opt text;
    transfer_block_height : opt nat64;
};

type CreateSwapRequest = record {
    ethereum_sender : text;
    amount : nat64;
    hashlock : blob;
    timelock : nat64;
    cross_chain_id : opt text;
};

type CompleteSwapRequest = record {
    order_id : text;
    preimage : blob;
};

type RefundSwapRequest = record {
    order_id : text;
};

type CrossChainMessage = record {
    source_chain : text;
    target_chain : text;
    order_id : text;
    message_type : text;
    payload : blob;
    signature : opt blob;
    timestamp : nat64;
};

type ChainFusionConfig = record {
    evm_canister_id : opt principal;
    ethereum_contract_address : text;
    authorized_ethereum_senders : vec text;
    chain_fusion_enabled : bool;
};

type BridgeConfig = record {
    bridge_fee_percentage : nat64;
    min_swap_amount : nat64;
    max_swap_amount : nat64;
    authorized_resolvers : vec principal;
    ethereum_contract_address : text;
    chain_fusion_enabled : bool;
    icp_ledger_canister_id : principal;
};

service : {
    "greet": (text) -> (text) query;
    "get_canister_status": () -> (text) query;
    "get_swap_statistics": () -> (nat64, nat64, nat64) query;
    "get_bridge_config_query": () -> (BridgeConfig) query;
    "get_chain_fusion_status": () -> (bool) query;
    "get_canister_balance_query": () -> (nat64) query;
    "get_swap_order": (text) -> (SwapOrder) query;
    "is_hashlock_used": (blob) -> (bool) query;
    "get_cross_chain_message": (text) -> (CrossChainMessage) query;
    "create_icp_swap": (CreateSwapRequest) -> (text);
    "complete_icp_swap": (CompleteSwapRequest) -> ();
    "refund_icp_swap": (RefundSwapRequest) -> ();
    "process_cross_chain_message": (CrossChainMessage) -> ();
    "set_bridge_fee_percentage": (nat64) -> ();
    "set_swap_limits": (nat64, nat64) -> ();
    "set_authorized_resolver": (principal, bool) -> ();
    "set_chain_fusion_enabled": (bool) -> ();
    "set_ethereum_contract_address": (text) -> ();
    "set_icp_ledger_canister_id": (principal) -> ();
    "submit_ethereum_transaction": (blob) -> (text);
};
